# .github/workflows/falcon-sensor.yml

name: Falcon Sensor ACR Sync

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
  schedule:
    - cron: '0 * * * *'

jobs:
  sync-sensor:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
          
    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: crmiked.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Create scan results directory
      run: mkdir -p ./scan-results

    - name: Download and Process Falcon Container Sensor
      env:
        FCSCLIENTID: ${{ vars.FALCON_CLIENT_ID }}
        FSCSECRET: ${{ secrets.FALCON_CLIENT_SECRET }}
      run: |
        echo "⬇️ Downloading Falcon Container Sensor pull script..."
        curl -sSL -o falcon-container-sensor-pull.sh https://github.com/CrowdStrike/falcon-scripts/releases/latest/download/falcon-container-sensor-pull.sh
        chmod 777 ./falcon-container-sensor-pull.sh

        echo "🔄 Copying sensor to ACR..."
        ./falcon-container-sensor-pull.sh \
        --client-id "$FCSCLIENTID" \
        --client-secret "$FSCSECRET" \
        --region us-1 \
        --type falcon-sensor \
        --copy crmiked.azurecr.io/falcon-sensor

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and Push Docker Image
      id: build
      run: |
        # Build the image
        docker build -t ghcr.io/${{ github.repository_owner }}/ubuntu2scandemo:latest .
        
        # Push to GitHub Container Registry
        docker push ghcr.io/${{ github.repository_owner }}/ubuntu2scandemo:latest
        
        # Get the image ID and save it
        IMAGE_ID=$(docker images ghcr.io/${{ github.repository_owner }}/ubuntu2scandemo:latest --format "{{.ID}}")
        echo "Image ID: $IMAGE_ID"
        echo "image_id=ghcr.io/${{ github.repository_owner }}/ubuntu2scandemo:latest" >> $GITHUB_OUTPUT

    - name: Scan Image for Vulnerabilities Only
      uses: crowdstrike/fcs-action@v2.0.2
      with:
        falcon_client_id: ${{ vars.FALCON_CLIENT_ID }}
        falcon_region: 'us-1'
        scan_type: image
        image: ${{ steps.build.outputs.image_id }}
        vulnerability_only: true
        minimum_severity: high
        minimum_score: 7.0
        vuln_fixable_only: true
        report_formats: json,sarif
        output_path: './vuln-results/results.json'
      env:
        FALCON_CLIENT_SECRET: ${{ secrets.FALCON_CLIENT_SECRET }}
    
    - name: Upload SARIF report
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: './scan-results'
        category: 'container-scan'
        wait-for-processing: true
            
    - name: Workflow Summary
      if: always()
      run: |
        echo "## Falcon Sensor Sync Complete" >> $GITHUB_STEP_SUMMARY
        echo "✅ Environment verified" >> $GITHUB_STEP_SUMMARY
        echo "✅ ACR login successful" >> $GITHUB_STEP_SUMMARY
        echo "✅ Sensor downloaded and pushed" >> $GITHUB_STEP_SUMMARY
        echo "✅ Docker image built and pushed: ${{ steps.build.outputs.image_id }}" >> $GITHUB_STEP_SUMMARY
        echo "✅ Container image scan completed" >> $GITHUB_STEP_SUMMARY
        if [ -f "./scan-results/scan.sarif" ]; then
          echo "✅ SARIF report generated" >> $GITHUB_STEP_SUMMARY
          echo "SARIF file size: $(stat -f%z ./scan-results/scan.sarif 2>/dev/null || stat -c%s ./scan-results/scan.sarif 2>/dev/null) bytes" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ SARIF report generation failed" >> $GITHUB_STEP_SUMMARY
        fi# .github/workflows/falcon-sensor.yml

name: Falcon Sensor ACR Sync

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
  schedule:
    - cron: '0 * * * *'

jobs:
  sync-sensor:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
          
    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: crmiked.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Create scan results directory
      run: mkdir -p ./scan-results

    - name: Download and Process Falcon Container Sensor
      env:
        FCSCLIENTID: ${{ vars.FALCON_CLIENT_ID }}
        FSCSECRET: ${{ secrets.FALCON_CLIENT_SECRET }}
      run: |
        echo "⬇️ Downloading Falcon Container Sensor pull script..."
        curl -sSL -o falcon-container-sensor-pull.sh https://github.com/CrowdStrike/falcon-scripts/releases/latest/download/falcon-container-sensor-pull.sh
        chmod 777 ./falcon-container-sensor-pull.sh

        echo "🔄 Copying sensor to ACR..."
        ./falcon-container-sensor-pull.sh \
        --client-id "$FCSCLIENTID" \
        --client-secret "$FSCSECRET" \
        --region us-1 \
        --type falcon-sensor \
        --copy crmiked.azurecr.io/falcon-sensor

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and Push Docker Image
      id: build
      run: |
        # Build the image
        docker build -t ghcr.io/${{ github.repository_owner }}/ubuntu2scandemo:latest .
        
        # Push to GitHub Container Registry
        docker push ghcr.io/${{ github.repository_owner }}/ubuntu2scandemo:latest
        
        # Get the image ID and save it
        IMAGE_ID=$(docker images ghcr.io/${{ github.repository_owner }}/ubuntu2scandemo:latest --format "{{.ID}}")
        echo "Image ID: $IMAGE_ID"
        echo "image_id=ghcr.io/${{ github.repository_owner }}/ubuntu2scandemo:latest" >> $GITHUB_OUTPUT

    - name: Scan Image for Vulnerabilities Only
      uses: crowdstrike/fcs-action@v2.0.2
      with:
        falcon_client_id: ${{ vars.FALCON_CLIENT_ID }}
        falcon_region: 'us-1'
        scan_type: image
        image: ${{ steps.build.outputs.image_id }}
        vulnerability_only: true
        minimum_severity: high
        minimum_score: 7.0
        vuln_fixable_only: true
        report_formats: json,sarif
        output_path: './vuln-results/results.json'
      env:
        FALCON_CLIENT_SECRET: ${{ secrets.FALCON_CLIENT_SECRET }}
    
    - name: Upload SARIF report
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: './scan-results'
        category: 'container-scan'
        wait-for-processing: true
            
    - name: Workflow Summary
      if: always()
      run: |
        echo "## Falcon Sensor Sync Complete" >> $GITHUB_STEP_SUMMARY
        echo "✅ Environment verified" >> $GITHUB_STEP_SUMMARY
        echo "✅ ACR login successful" >> $GITHUB_STEP_SUMMARY
        echo "✅ Sensor downloaded and pushed" >> $GITHUB_STEP_SUMMARY
        echo "✅ Docker image built and pushed: ${{ steps.build.outputs.image_id }}" >> $GITHUB_STEP_SUMMARY
        echo "✅ Container image scan completed" >> $GITHUB_STEP_SUMMARY
        if [ -f "./scan-results/scan.sarif" ]; then
          echo "✅ SARIF report generated" >> $GITHUB_STEP_SUMMARY
          echo "SARIF file size: $(stat -f%z ./scan-results/scan.sarif 2>/dev/null || stat -c%s ./scan-results/scan.sarif 2>/dev/null) bytes" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ SARIF report generation failed" >> $GITHUB_STEP_SUMMARY
        fi
