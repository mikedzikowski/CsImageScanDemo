# .github/workflows/falcon-sensor.yml

name: Falcon Sensor ACR Sync

on:
  # Triggers on push to main
  push:
    branches: [ "main" ]
  # Triggers on PR to main
  pull_request:
    branches: [ "main" ]
  # Manual trigger
  workflow_dispatch:
  # Runs every hour
  schedule:
    - cron: '0 * * * *'

jobs:
  sync-sensor:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: ['python']  # Add other languages if needed
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
          
    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: crmiked.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Create scan results directory
      run: mkdir -p ./scan-results

    - name: Download and Process Falcon Container Sensor
      env:
        FCSCLIENTID: ${{ vars.FALCON_CLIENT_ID }}
        FSCSECRET: ${{ secrets.FALCON_CLIENT_SECRET }}
      run: |
        echo "⬇️ Downloading Falcon Container Sensor pull script..."
        curl -sSL -o falcon-container-sensor-pull.sh https://github.com/CrowdStrike/falcon-scripts/releases/latest/download/falcon-container-sensor-pull.sh
        chmod 777 ./falcon-container-sensor-pull.sh

        echo "🔄 Copying sensor to ACR..."
        ./falcon-container-sensor-pull.sh \
        --client-id "$FCSCLIENTID" \
        --client-secret "$FSCSECRET" \
        --region us-1 \
        --type falcon-sensor \
        --copy crmiked.azurecr.io/falcon-sensor

        echo "✅ Sensor processing complete"

    - name: Run FCS IaC Scan
      uses: crowdstrike/fcs-action@v2.0.0
      env:
        INPUT_FALCON_CLIENT_ID: ${{ vars.FALCON_CLIENT_ID }}
        FALCON_CLIENT_SECRET: ${{ secrets.FALCON_CLIENT_SECRET }}
      with:
        falcon_client_id: ${{ vars.FALCON_CLIENT_ID }}
        falcon_region: 'us-1'
        scan_type: image
        image: nginx:latest
        vulnerability_only: true
        minimum_severity: high
        minimum_score: 7.0
        vuln_fixable_only: true
        path: './cloudformation'
        report_formats: 'sarif'  # Changed to SARIF format
        output_path: './scan-results/results.sarif'  # Changed extension to .sarif
        upload_results: true
          
    - name: Debug SARIF file
      run: |
        echo "Checking scan results directory..."
        ls -la ./scan-results
        echo "Checking if SARIF file exists..."
        if [ -f "./scan-results/results.sarif" ]; then
          echo "SARIF file exists"
          echo "File size: $(stat -f%z ./scan-results/results.sarif) bytes"
        else
          echo "SARIF file not found"
          echo "Directory contents:"
          ls -la ./scan-results
        fi

    - name: Upload SARIF report to GitHub Code scanning
      uses: github/codeql-action/upload-sarif@v3
      continue-on-error: true  # For debugging
      with:
        sarif_file: './scan-results/results.sarif'
        category: 'fcs-scan'
        wait-for-processing: true
            
    - name: Workflow Summary
      run: |
        echo "## Falcon Sensor Sync Complete" >> $GITHUB_STEP_SUMMARY
        echo "✅ Environment verified" >> $GITHUB_STEP_SUMMARY
        echo "✅ ACR login successful" >> $GITHUB_STEP_SUMMARY
        echo "✅ Sensor downloaded and pushed" >> $GITHUB_STEP_SUMMARY
        echo "✅ IaC scan completed" >> $GITHUB_STEP_SUMMARY
        echo "✅ SARIF report processed" >> $GITHUB_STEP_SUMMARY
