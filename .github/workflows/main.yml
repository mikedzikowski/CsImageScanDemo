# .github/workflows/falcon-sensor.yml

name: Falcon Sensor ACR Sync

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
  schedule:
    - cron: '0 * * * *'

jobs:
  sync-sensor:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
          
    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: crmiked.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Create scan results directory
      run: mkdir -p ./scan-results

    - name: Download and Process Falcon Container Sensor
      env:
        FCSCLIENTID: ${{ vars.FALCON_CLIENT_ID }}
        FSCSECRET: ${{ secrets.FALCON_CLIENT_SECRET }}
      run: |
        echo "⬇️ Downloading Falcon Container Sensor pull script..."
        curl -sSL -o falcon-container-sensor-pull.sh https://github.com/CrowdStrike/falcon-scripts/releases/latest/download/falcon-container-sensor-pull.sh
        chmod 777 ./falcon-container-sensor-pull.sh

        echo "🔄 Copying sensor to ACR..."
        ./falcon-container-sensor-pull.sh \
        --client-id "$FCSCLIENTID" \
        --client-secret "$FSCSECRET" \
        --region us-1 \
        --type falcon-sensor \
        --copy crmiked.azurecr.io/falcon-sensor

    - name: Run FCS Image Scan
      id: fcs-scan
      uses: crowdstrike/fcs-action@v2.0.0
      env:
        INPUT_FALCON_CLIENT_ID: ${{ vars.FALCON_CLIENT_ID }}
        FALCON_CLIENT_SECRET: ${{ secrets.FALCON_CLIENT_SECRET }}
      with:
        falcon_client_id: ${{ vars.FALCON_CLIENT_ID }}
        falcon_region: 'us-1'
        scan_type: image
        image: nginx:latest
        vulnerability_only: true
        minimum_severity: high
        minimum_score: 7.0
        vuln_fixable_only: true
        report_formats: 'json'
        output_path: './scan-results/results.json'

    - name: Debug JSON Results
      run: |
        echo "Checking for JSON results file..."
        ls -la ./scan-results/
        echo "JSON file contents:"
        cat ./scan-results/results.json || echo "JSON file not found"

    - name: Convert JSON to SARIF
      run: |
        # First check if JSON file exists and has content
        if [ ! -f "./scan-results/results.json" ]; then
          echo "Results JSON file not found"
          exit 1
        fi
        
        # Create basic SARIF structure
        echo '{
          "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
          "version": "2.1.0",
          "runs": [
            {
              "tool": {
                "driver": {
                  "name": "Falcon Container Security",
                  "informationUri": "https://www.crowdstrike.com/"
                }
              },
              "results": []
            }
          ]
        }' > ./scan-results/scan.sarif

        # Check JSON content and convert
        if [ -s "./scan-results/results.json" ]; then
          jq -e '
          {
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "version": "2.1.0",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "Falcon Container Security",
                    "informationUri": "https://www.crowdstrike.com/",
                    "rules": [
                      .vulnerabilities[] | {
                        "id": .cve,
                        "shortDescription": {
                          "text": .description
                        },
                        "fullDescription": {
                          "text": .description
                        }
                      }
                    ]
                  }
                },
                "results": [
                  .vulnerabilities[] | {
                    "ruleId": .cve,
                    "message": {
                      "text": .description
                    },
                    "level": (
                      if .severity == "CRITICAL" or .severity == "HIGH" then "error"
                      elif .severity == "MEDIUM" then "warning"
                      else "note"
                      end
                    )
                  }
                ]
              }
            ]
          }' ./scan-results/results.json > ./scan-results/scan.sarif || cp ./scan-results/template.sarif ./scan-results/scan.sarif
        fi

        # Verify SARIF file was created
        if [ ! -s "./scan-results/scan.sarif" ]; then
          echo "Failed to create valid SARIF file"
          exit 1
        fi

    - name: Debug SARIF file
      run: |
        echo "Checking scan results directory..."
        ls -la ./scan-results/
        echo "SARIF file contents:"
        cat ./scan-results/scan.sarif || echo "SARIF file not found"

    - name: Upload SARIF report
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: './scan-results/'
        category: 'container-scan'
        wait-for-processing: true
            
    - name: Workflow Summary
      if: always()
      run: |
        echo "## Falcon Sensor Sync Complete" >> $GITHUB_STEP_SUMMARY
        echo "✅ Environment verified" >> $GITHUB_STEP_SUMMARY
        echo "✅ ACR login successful" >> $GITHUB_STEP_SUMMARY
        echo "✅ Sensor downloaded and pushed" >> $GITHUB_STEP_SUMMARY
        echo "✅ Container image scan completed" >> $GITHUB_STEP_SUMMARY
        echo "✅ SARIF report processed" >> $GITHUB_STEP_SUMMARY

    - name: Check for scan results
      if: always()
      run: |
        if [ -f "./scan-results/scan.sarif" ]; then
          echo "Scan completed successfully"
        else
          echo "Scan failed to generate SARIF report"
          exit 1
        fi
